Sactory.addWidget("message", function(message){
	return <span>
		<:bind :to=message :as=message :mode="code">
			const match = message.matchAll(/`[^`]*`/g);
			let curr, index = 0;
			while(!(curr = match.next()).done) {
				<:element ~text=message.substring(index, index = curr.value.index) />
				<code ~text=curr.value[0].slice(1, -1) />
				index += curr.value[0].length;
			}
			<:element ~text=message.substr(index) />
		</:bind>
	</span>
});

class Sandbox {

	constructor({readonly, embedded, name, mode, head, source}) {
		this.debug = (&false).localStorage("sandbox_debug");
		this.es6 = (&this.checkES6()).localStorage("sandbox_es6");
		this.capitalIsWidget = (&true).localStorage("sandbox_capital_is_widget");
		this.hideResult = (&false).localStorage("sandbox_hide_result");
		this.lastId = (&0).localStorage("sandbox_id");
		this.currentId = (&0).localStorage("sandbox_curr_id");
		this.readonly = &!!readonly;
		this.data = {
			name: &"",
			description: &"",
			mode: &"auto-code@logic",
			head: &"",
			source: &""
		};
		const hash = window.location.hash && decode(window.location.hash.substr(1));
		if(hash) {
			// data is from hash, do not save to local storage, disallow edit
			this.*readonly = true;
			if(hash.name) this.data.*name = hash.name;
			if(hash.mode) this.data.*mode = hash.mode;
			if(hash.head) this.data.*head = hash.head;
			if(hash.source) this.data.*source = hash.source;
		} else if(!embedded) {
			this.reloadStorage();
			this.saveStorage();
		} else {
			if(name) this.data.*name = name;
			if(mode) this.data.*mode = mode;
			if(head) this.data.*head = head;
			if(source) this.data.*source = source;
		}
		this.data.editorSource = this.data.*source;
		this.result = async & => {
			try {
				return Transpiler.transpile({
					filename: this.data.*name,
					mode: this.data.*mode,
					es6: this.*es6,
					capitalIsWidget: this.*capitalIsWidget,
					sandboxed: true
				}, this.data.*source);
			} catch(error) {
				console.error(error);
				return {error};
			}
		};
		// source
		this.srcdoc = & => `${this.data.*head}<script src="${DIST}sactory${this.debug ? ".debug" : ""}.min.js"></script><script>Sactory.ready(function(){${this.*result.source && this.*result.source.all}})</script>`;
		// settings
		this.settings = &false;
		this.snippets = & => {
			if(this.*settings) {
				let ret = [];
				for(let id=0; id<=this.^lastId; id++) {
					const stored = window.localStorage.getItem("sandbox__" + id);
					if(stored) {
						ret.push(Object.assign(JSON.parse(stored), {id}));
					}
				}
				return ret.sort((a, b) => b.modified - a.modified);
			} else {
				// not showing settings, do not bother to calculate
				return [];
			}
		};
	}

	checkES6() {
		try {
			eval("() => {}");
			return true;
		} catch(e) {
			return false;
		}
	}

	reloadStorageImpl(id) {
		const storage = window.localStorage.getItem("sandbox__" + id);
		if(storage) {
			const data = JSON.parse(storage);
			this.data.*name = data.name;
			this.data.*description = data.description;
			this.data.*mode = data.mode;
			this.data.*head = data.head;
			this.data.*source = data.source;
		}
	}

	reloadStorage() {
		this.reloadStorageImpl(this.*currentId);
	}

	saveStorage() {
		if(!this.saving) {
			const saver = async & => JSON.stringify({
				name: this.data.*name,
				description: this.data.*description,
				mode: this.data.*mode,
				head: this.data.*head,
				source: this.data.*source,
				modified: new Date().getTime()
			});
			saver.$$subscribe(value => window.localStorage.setItem("sandbox__" + this.*currentId, value));
			this.saving = true;
		}
	}

	plus() {
		// create new snippet
		this.*currentId = ++this.*lastId;
		if(this.*readonly) {
			// remove read-only limitation and init storage
			this.*readonly = false;
			this.saveStorage();
		} else {
			this.data.*name = "";
			this.data.*description = "";
			this.data.*mode = "auto-code@logic";
			this.data.*head = "";
			this.data.*source = "";
		}
	}

	openImpl(type, data) {
		window.open(`${ROOT}${type}#${encode(data)}`);
	}

	open() {
		this.openImpl("sandbox", this.data);
	}

	fullscreen() {
		this.openImpl("fullscreen", {
			name: this.data.*name,
			srcdoc: this.*srcdoc
		});
	}

	load(id) {
		this.*settings = false;
		this.*readonly = false;
		this.reloadStorageImpl(this.*currentId = id);
	}

	remove(name, id) {
		if(window.confirm(`Are you sure you want to delete "${name}"? This action cannot be undone.`)) {
			delete window.localStorage["sandbox__" + id];
			this.snippets._calc();
		}
	}

	save() {
		this.data.source.update(this.data.editorSource, 8934);
	}

	initCodeMirror(element, readOnly, mode) {
		const editor = CodeMirror.fromTextArea(element, {
			lineNumbers: true,
			indentWithTabs: true,
			tabSize: 4,
			smartIndent: false,
			lineWrapping: true,
			theme: "sactory",
			readOnly, mode
		});
		editor.setSize("100%", "100%");
		return editor;
	}

	initSourceEditor(element) {
		const editor = this.initCodeMirror(element, this.*readonly, "jsx");
		editor.on("change", () => this.data.editorSource = editor.getValue());
		this.data.source.$$subscribe(value => editor.setValue(value), 8934);
		<:use (element.nextElementSibling) +[[save]]:prevent={{this.save()}} />
		if(this.*readonly) {
			//TODO remove readOnly option
			this.readonly.$$subscribe(() => editor.setOption("readOnly", false));
		}
	}

	initResultEditor(element) {
		const editor = this.initCodeMirror(element, true, "javascript");
		this.result.$$subscribe(value => editor.setValue(value.source && value.source.contentOnly || ""));
	}
	
	render({orientation = "x", hide = [], embedded}) {
		return <div data-orientation=orientation ~class:hide-result=this.*hideResult>
			foreach(hide as value) {
				<:element ~class=`hide-${value}` />
			}
			<div class="top" ~show=!this.*settings>
				<div class="actions">
					<div>
						<div class="left">
							<input class="input" placeholder="Name" @disabled=this.*readonly *value::change=this.data.*name />
						</div>
						<div class="right">
							<div class="buttons">
								if(!embedded) {
									<button class="button default" +click={{this.*settings=true}}><i class="fas fa-cog" /></button>
									<button class="button default" +click={{this.plus()}}><i class="fas fa-plus" /></button>
									if(!this.*readonly) {
										<button class="button primary" +click={{this.open()}}><i class="fas fa-share" /></button>
									}
								}
								<button class="button primary" +click={{this.save()}}><i class="fas fa-play" /></button>
								<button class="button primary" +click={{this.fullscreen()}}><i class="fas fa-expand" /></button>
								if(embedded) {
									<button class="button default" +click={{this.open()}}><i class="fas fa-external-link-alt" /></button>
								}
							</div>
						</div>
					</div>
				</div>
				<div class="editor">
					<textarea @value=this.data.editorSource +documentappend={{this.initSourceEditor(target)}} />
					if(this.*result.error) {
						<div class="error">
							<message $=this.*result.error.message.trim() />
						</div>
					}
					if(this.*result.warnings && this.*result.warnings.length) {
						<div class="warning">
							foreach(this.*result.warnings.slice(0, 3) as {message, position: {line, column}}) {
								<div>Line ${line + 1}, Column ${column}: ${message}</div>
							}
							if(this.*result.warnings.length > 3) {
								<div>${this.*result.warnings.length - 3} more...</div>
							}
						</div>
					}
				</div>
			</div>
			<div class="top settings" ~show=this.*settings>
				<div &height="100%" &background="white" &padding="16px" &overflow-y="auto">
					<div &float="right">
						<button class="button danger" +click={{this.*settings=false}}><i class="fas fa-times" /></button>
					</div>
					<h3>Settings</h3>
					<label>
						<input *checkbox=this.*debug /> Debug
					</label>
					<label>
						<input *checkbox=this.*es6 /> Generate ES6 code
					</label>
					<label>
						<input *checkbox=this.*capitalIsWidget /> Capital is widget
					</label>
					<label>
						<input *checkbox=this.*hideResult /> Hide compiled code
					</label>
					<:inherit &width="100%" @disabled=this.*readonly :whitelist="input" :whitelist="textarea">
						<h4>Description</h4>
						<textarea class="input" *value::change=this.data.*description />
						<h4>Mode</h4>
						<input class="input" placeholder="Mode" *value::change=this.data.*mode />
						<h4>Header</h4>
						<textarea class="input font-mono" placeholder="e.g. <script src=\"example.js\"></script>" rows=6 *value::change=this.data.*head />
					</:inherit>
					<h4>Saved snippets</h4>
					<table>
						<tr>
							<th>Name</th>
							<th width=1>Size</th>
							<th width=1>Modified</th>
							<th width=1 />
						</tr>
						foreach(this.*snippets as {id, name, source, modified}) {
							<tr>
								<td>${name}</td>
								<td>${source.length}</td>
								<td class="nowrap">${new Date(modified).toLocaleString()}</td>
								<td>
									<div class="buttons">
										<button class="button primary" +click={{this.load(id)}}><i class="fas fa-play" /></button>
										<button class="button danger" +click={{this.remove(name, id)}}><i class="fas fa-trash" /></button>
									</div>
								</td>
							</tr>
						}
					</table>
				</div>
			</div>
			<div class="bottom">
				<div class="frame">
					<iframe srcdoc=this.*srcdoc />
				</div>
				<div class="source">
					<textarea @value=(this.^result.source && this.^result.source.contentOnly || "") +documentappend={{this.initResultEditor(target)}} />
				</div>
			</div>
		</div>
	}

	static style() {
		return <style>
			position: absolute;
			top, bottom, left, right: 0;

			.top, .bottom {
				position: absolute;
			}

			&[data-orientation='x'] {
				.top, .bottom {
					top, bottom: 0;
					width: 50%;
				}
				.top {
					left: 0;
					border-right: 2px solid transparent;
				}
				.bottom {
					right: 0;
					border-left: 2px solid transparent;
				}
			}

			&[data-orientation='y'] {
				.top, .bottom {
					left, right: 0;
					height: 50%;
				}
				.top {
					top: 0;
					border-bottom: 2px solid transparent;
				}
				.bottom {
					bottom: 0;
					border-top: 2px solid transparent;
				}
			}

			.top {
				.actions, .editor {
					position: absolute;
					left, right: 0;
				}
				.actions {
					top: 0;
					height: 64px;
					border-bottom: 2px solid transparent;
					& > div {
						background: white;
						height: 100%;
						padding: 0 12px;
						display: flex;
						justify-content: space-between;
						.left, .right {
							display: flex;
							align-items: center;
							& > * + * {
								margin-left: 12px;
							}
						}
					}
				}
				.editor {
					top: 64px;
					bottom: 0;
					border-top: 2px solid transparent;
					.error, .warning {
						position: absolute;
						bottom, left, right: 0;
						padding: 12px;
						color: white;
						font-family: Consolas, monospace;
						white-space: pre-wrap;
						z-index: 4;
						code {
							background: rgba(255, 255, 255, .125);
						}
					}
					.error {
						background: #e74c3c;
					}
					.warning {
						background: #ffcd02;
						& > * + * {
							margin-top: 12px;
						}
					}
				}
				&.settings {
					label {
						display: block;
						& + label {
							margin-top: 8px;
						}
					}
					table {
						width: 100%;
						border-collapse: collapse;
						th, td {
							padding: 4px 8px;
						}
						td {
							border-top: 1px solid #ddd;
						}
						tr th:first-child {
							text-align: left;
						}
						tr td:nth-child(2), tr td:nth-child(3) {
							text-align: center;
						}
					}
				}
			}

			.bottom {
				.frame, .source {
					position: absolute;
					height: 50%;
					left, right: 0;
				}
				.frame {
					width: 100%;
					top: 0;
					border-bottom: 2px solid transparent;
					iframe {
						width, height: 100%;
						margin: 0;
						border: 0;
						background: white;
					}
				}
				.source {
					bottom: 0;
					border-top: 2px solid transparent;
				}
			}

			.CodeMirror {
				background: white !important;
			}

			&.hide-result {
				.bottom {
					.frame {
						height: 100%;
						border-bottom-width: 0;
					}
					.source {
						display: none;
					}
				}
			}
		</style>
	}

};
